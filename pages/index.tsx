import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import { useCallback, useState } from 'react'
import sendUser from '../logic/sendUser'
import { motion } from 'framer-motion'
import { type } from 'os'
import Loading from '../public/components/loading'

const FOOTER_2 = () => {
  return (
    <>
      <h1>
        about
      </h1>
      <p>
        ioweasy list yours recent unfollowers

        <br />

        it doesn't uses Meta's API.
        <br />

        ioweasy collect, store and compare the list of followers provided by Instagram user interface
      </p>
    </>
  )
}
const FOOTER_1 = () => {
  return (
    <>
      <h1>
        remember
      </h1>
      <p>
        the list may have wrong imprecise information because the algorithm use the instagram user interface
      </p>
    </>
  )
}

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
  const [user, setUser] = useState<string>('');
  const [status, setStatus] = useState<any>();

  const send = useCallback(() => {
    if (user?.length < 4) return
    setStatus(sendUser(user))
  }, [user])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <motion.div animate={{ x: [-20, 0], opacity: [0, 1] }}
          transition={{ type: "spring" }} className={styles.description}>
          <div className={styles.wrap}>
            <h1>
              ioweasy
            </h1>
            <p>instagram user</p>
            <input onBlur={() => send()} value={user} onChange={(e) => setUser(e.target.value)} type={'text'}></input>
          </div>
        </motion.div>
        <motion.div
          className={styles.center}
          initial={{ opacity: 0, scale: 0.5 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{
            duration: 0.8,
            delay: 0.5,
            ease: [0, 0.71, 0.2, 1.01]
          }}
        >
          <motion.div
            className={styles.result}
            animate={{ height: status ? 'auto' : 0 }}
            transition={{
              type: 'spring'
            }}
          >
            <div>
              {status && <Loading />}
            </div>
          </motion.div>


          {status ? <FOOTER_1 /> : <FOOTER_2 />}
        </motion.div>
      </main>
    </>
  )
}
